"0","```r
#remotes::install_github(\"hrbrmstr/ggchicklet\",upgrade = 'never')
options(warn = -1)
library(ggchicklet)
library(showtext)
```"
"1","Loading required package: sysfonts
Loading required package: showtextdb
"
"0","```r
library(tidyverse)
```"
"1","Registered S3 methods overwritten by 'dbplyr':
  method         from
  print.tbl_lazy     
  print.tbl_sql      
-- Attaching packages ------------------------------------------------------------------------------------------------------------ tidyverse 1.3.1 --
v ggplot2 3.3.5     v purrr   0.3.4
v tibble  3.1.2     v dplyr   1.0.6
v tidyr   1.2.0     v stringr 1.4.0
v readr   1.4.0     v forcats 0.5.1
Warning: package â€˜ggplot2â€™ was built under R version 4.1.3Warning: package â€˜tidyrâ€™ was built under R version 4.1.3-- Conflicts --------------------------------------------------------------------------------------------------------------- tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
"
"0","```r
library(patchwork)
library(ggtext)
library(png)

font_add_google(\"VT323\", \"VT323\")
showtext_auto()
myFont <- \"VT323\"

# This function transforms the select all that applies questions (wide) to a long format which is useful for data visualization
make_long_df <- function(df, cols_id, values_to,id_name = 'id') {
  df_tmp <- df %>%
    rownames_to_column(var = id_name) %>%
    pivot_longer(contains(cols_id),
                 names_to = 'tmp',
                 values_to = values_to) %>%
    select(-tmp)
  
}

# This function calculates median for categorical variables such as compensation
median.ordered <- function(x)
{
  levs <- levels(x)
  m <- median(as.integer(x))
  if (floor(m) != m)
  {
    warning(\"Median is between two values; using the first one\")
    m <- floor(m)
  }
  ordered(m, labels = levs, levels = seq_along(levs))
}



role <- 'Select any activities that make up an important part of your role at work:'
nlp <- 'Which of the following natural language processing (NLP) methods do you use on a regular basis? '


compensation_levels_2021<-
  c(
    \"$0-999\",
    \"1,000-1,999\",
    \"2,000-2,999\",
    \"3,000-3,999\",
    \"4,000-4,999\",
    \"5,000-7,499\",
    \"7,500-9,999\",
    '10,000-14,999',
    \"15,000-19,999\",
    \"20,000-24,999\",
    \"25,000-29,999\",
    '30,000-39,999',
    '40,000-49,999',
    '50,000-59,999',
    '60,000-69,999',
    \"70,000-79,999\",
    '80,000-89,999',
    '90,000-99,999',
    '100,000-124,999',
    '125,000-149,999',
    \"150,000-199,999\",
    \"200,000-249,999\",
    \"250,000-299,999\",
    \"300,000-499,999\",
    \"$500,000-999,999\"
  )

ml_algorithms <- c('Linear or Logistic Regression',
                   'Decision Trees or Random Forests',
                   'Gradient Boosting Machines (xgboost, lightgbm, etc)',
                   'Convolutional Neural Networks',
                   'Bayesian Approaches',
                   'Generative Adversarial Networks',
                   'Transformer Networks (BERT, gpt-3, etc)',
                   'Dense Neural Networks (MLPs, etc)')

ml_frameworks <- c('Scikit-learn',	'Keras','TensorFlow','Tidymodels','PyTorch','Xgboost')

cloud_platform <- c('Amazon Web Services (AWS)','Google Cloud Platform (GCP)','Microsoft Azure')

vis_libraries <- c('Matplotlib','Seaborn','Plotly / Plotly Express','Ggplot / ggplot2')

programming_languages <- c('Python','SQL','R','Javascript','Java','C',\"C++\",'Matlab','Bash')

coding_experience_levels <- c('I have never written code','< 1 years','3-5 years','5-10 years','10-20 years','20+ years')

ml_experience_levels <- c('I do not use machine learning methods','Under 1 year','1-2 years','2-3 years','3-4 years','4-5 years','5-10 years','10-20 years','20 or more years')


# This function prepares the data for visualization. It takes a role_title such as data analyst and a column name corresponding to the select all that applies questions (e.g. Which of the following machine learning frameworks do you use on a regular basis?)
# Then it computes the percentage of users with the given role_title that use a tool or an algorithm specified in the quesions

vis_data_long <-function(d_role_title,wide_col,item_vec='',n_items = 5){
  
  summary_data <- kaggle_2021 %>%
    select(
      role_title,
      starts_with(wide_col)
    ) %>%
    mutate(n_participants = nrow(.)) %>%
    group_by(role_title) %>%
    mutate(n_participants_per_g = n()) %>%
    ungroup() %>%

    make_long_df(wide_col,
                 'items') %>%
    filter(!is.na(items),!str_detect(items, 'None'),!str_detect(items, 'Other')) %>%
    group_by(items) %>%
    mutate(avg_ratio = n() / mean(n_participants)) %>%
    ungroup() %>%
    group_by(role_title, items) %>%
    
    summarise(ratio = n() / mean(n_participants_per_g),
              avg_ratio = mean(avg_ratio)) %>%
    mutate(
      if_bigger_than_average = ratio > avg_ratio,
      label = if_else(if_bigger_than_average, 'higher', 'lower')
    ) %>% 
        filter(role_title == d_role_title) %>%
    arrange(desc(ratio))%>%
        suppressMessages()
  
  if (length(item_vec)<2) 
        summary_data %>% 
    slice_max(ratio ,n =n_items) 
   else
       summary_data %>%  filter(items %in% item_vec) %>% 
    slice_max(ratio ,n =n_items) 
}



# This function creates video-game like bar charts for kaggle questions
create_power_bars <- function(data,fill_color,title = '',emoji_char = 'sword'){
  # options(repr.plot.width=10, repr.plot.height=5,warn = -1)
options()
  data%>%
  ggplot(aes( x = fct_reorder(items,ratio))) +
  geom_chicklet(aes(y = 1), fill = 'white') +
  
  #with_inner_glow(
    
    geom_col(aes(y = ratio),
           alpha = 0.7,
           width = 0.7,
           fill = fill_color) +
        geom_chicklet(aes(y = 0.1),
                colour = \"#264653\",fill = 'transparent',size= 2,width = 0.7) +
        geom_chicklet(aes(y = 0.2),radius =  grid::unit(3, \"pt\"),
                colour = \"#264653\",fill = 'transparent',size= 2,width = 0.7) +
      geom_chicklet(aes(y = 0.3),radius =  grid::unit(3, \"pt\"),
                colour = \"#264653\",fill = 'transparent',size= 2,width = 0.7) +
        geom_chicklet(aes(y = 0.4),
                colour = \"#264653\",fill = 'transparent',size= 2,width = 0.7) +
      geom_chicklet(aes(y = 0.5),radius =  grid::unit(3, \"pt\"),
                colour = \"#264653\",fill = 'transparent',size= 2,width = 0.7) +
        geom_chicklet(aes(y = 0.6),radius =  grid::unit(3, \"pt\"),
                colour = \"#264653\",fill = 'transparent',size= 2,width = 0.7) +
      geom_chicklet(aes(y = 0.7),radius =  grid::unit(3, \"pt\"),
                colour = \"#264653\",fill = 'transparent',size= 2,width = 0.7) +
          geom_chicklet(aes(y = 0.8),radius =  grid::unit(3, \"pt\"),
                colour = \"#264653\",fill = 'transparent',size= 2,width = 0.7) +
      geom_chicklet(aes(y = 0.9),radius =  grid::unit(3, \"pt\"),
                colour = \"#264653\",fill = 'transparent',size= 2,width = 0.7) +
        geom_chicklet(aes(y = 1),radius =  grid::unit(3, \"pt\"),
                colour = \"#264653\",fill = 'transparent',size= 2,width = 0.7) +
    geom_text(aes(y=1.07,label = round(100*ratio)),family = myFont,size = 13)+
    geom_text(aes(y=1.17,label = round(100*(ratio-avg_ratio)),color = label),family = myFont,size = 12)+
    scale_color_manual(values = c('lower'='#ef476f','higher'='#06d6a0'))+
    labs(x = '',y ='',title = title)+
  coord_flip() +
  theme_void(base_family = myFont)  +
    theme(
      legend.position = 'none',
          axis.title = element_text(family = myFont,hjust = 0.5,size = 50,margin = margin(b = 3)),#,aspect.ratio =1,
          axis.line = element_blank(),
          axis.ticks = element_blank(),
          axis.text.x = element_blank(),
          axis.text.y = element_text(size = 44,margin=grid::unit(c(0,0,0,0), \"mm\"),hjust = 1),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank()) 

  
}




# This function assembles all the video-game bar charts into one plot
assemble_plots <- function(role,show_plot = FALSE) {
vis_data_programming_languages <-
  vis_data_long(
    role,
    \"What programming languages do you use on a regular basis?\",
    n_items = 6,
    item_vec = programming_languages
  )

vis_data_databases <-
  vis_data_long(
    role,
    \"Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?\",
    n_items = 6
  )


vis_data_ml_algorithm <-
  vis_data_long(
    role,
    \"Which of the following ML algorithms do you use on a regular basis?\",
    n_items = 6,
    item_vec = ml_algorithms
  ) %>%   mutate(
    items = recode(
      items,
      `Dense Neural Networks (MLPs, etc)` = 'Dense Neural Networks',
      `Gradient Boosting Machines (xgboost, lightgbm, etc)` = 'Gradient Boosting Machines',
      `Transformer Networks (BERT, gpt-3, etc)` = 'Transformer Networks'
    )
  )


vis_data_mlframework <-
  vis_data_long(
    role,
    'Which of the following machine learning frameworks do you use on a regular basis?',
    n_items = 6
  )


vis_data_ide <- vis_data_long(role,'Which of the following integrated development environments','IDE')


vis_data_vis<- vis_data_long(role,'What data visualization libraries or tools do you use on a regular basis?',item_vec = vis_libraries) %>% 
  mutate(items = recode(items, `Ggplot / ggplot2` = 'ggplot2', `Plotly / Plotly Express` = 'Plotly'))


vis_data_bi <- vis_data_long(role,'Which of the following business intelligence tools do you use on a regular basis?',n_items = 4)


 
 
vis_data_cv_alg <-  vis_data_long(role,'Which categories of computer vision methods do you use on a regular basis?',n_items = 4) %>%
   mutate(
     items = recode(
       items,
       `Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)` = 'Image classification',
       `General purpose image/video tools (PIL, cv2, skimage, etc)` = 'General purpose image/video tools',
       `Object detection methods (YOLOv3, RetinaNet, etc)` = 'Object detection',
       `Generative Networks (GAN, VAE, etc)` = 'Generative Networks',
       `Image segmentation methods (U-Net, Mask R-CNN, etc)` = 'Image segmentation methods'
     )
   ) 

 
 
vis_data_nlp_alg <- vis_data_long(role,'Which of the following natural language processing (NLP) methods do you use on a regular basis?') %>%
   
   mutate(
     items = recode(
       items,
       `Word embeddings/vectors (GLoVe, fastText, word2vec)` = 'Word embeddings',
       `Transformer language models (GPT-3, BERT, XLnet, etc)` = 'Transformers',
       `Encoder-decorder models (seq2seq, vanilla transformers)` = 'Encoder-decorder models',
       `Contextualized embeddings (ELMo, CoVe)` = 'Contextualized embeddings'
     )
   )  
 

vis_data_cloud <-
  vis_data_long(
    role,
    'Which of the following cloud computing platforms do you use on a regular basis?',
    n_items = 4
  )
vis_data_cloud_storage <-
  vis_data_long(role,
                'Do you use any of the following data storage products on a regular basis?',
                n_items = 4)
'Do you use any of the following data storage products on a regular basis?'
vis_data_manager_ml <-
  vis_data_long(
    role,
    'Do you use any of the following managed machine learning products on a regular basis?',
    n_items = 4
  ) 


ml_alg_plot <- create_power_bars(vis_data_ml_algorithm, '#f4a261',title = 'ML Algorithmsâš”ï¸',emoji_char = \"kiwi_fruit\" )
ml_framework_plot <- create_power_bars(vis_data_mlframework, '#f4a261',title = 'ML Frameworksï¸ï¸')
vis_plot <- create_power_bars(vis_data_vis, '#2a9d8f',title = 'Visualization Libraries')
bi_plot <- create_power_bars(vis_data_bi, '#2a9d8f',title = 'Business Intelligence Tools' )
nlp_alg_plot <- create_power_bars(vis_data_nlp_alg, '#118ab2',title = 'NLP Algorithms')
cv_alg_plot <- create_power_bars(vis_data_cv_alg, '#118ab2',title = 'Computer Vision Algorithms')
db_plot <- create_power_bars(vis_data_databases, '#ef476f',title = 'Databases')
programming_plot <- create_power_bars(vis_data_programming_languages, '#ef476f',title = 'Programming Languages')
cloud_plot <- create_power_bars(vis_data_cloud, '#ffd166',title = 'Cloud Platforms')
data_storage_plot <- create_power_bars(vis_data_cloud_storage, '#ffd166',title = 'Data Storage')
ide_plot <- create_power_bars(vis_data_ide, '#f5cac3',title = 'IDE')
mmp_plot <- create_power_bars(vis_data_manager_ml, '#f5cac3',title = 'Managed ML Products')
options(repr.plot.width=60, repr.plot.height=15,warn = -1)
    #4. Kaggle notebooks are not perfect for displaying charts made by R and ggplot2.
    #I had to spend hours to try to fix the issue with displaying my bar chart plots with the right font size and resolution but unfortunately the plots are not shown perfectly fine.
    #So, I used images of these plot that I created in my local machine. But still if you set the `show_plot=TRUE` the plots will be shown.
if(show_plot){
    programming_plot + db_plot + ml_alg_plot + ml_framework_plot + vis_plot + bi_plot + nlp_alg_plot + cv_alg_plot + cloud_plot + data_storage_plot + ide_plot + mmp_plot + plot_layout(nrow = 3,ncol = 4,heights = c(6,4,4),widths = c(1,1,1,1)) 

}

}


# This function  creates summary plots with information about the median of several variables and main activities that a role does 
plot_summary_info <-function(role,img,coding_experience_med_summary,ml_experience_med_summary,compensation_med_summary) {
    options(repr.plot.width=10, repr.plot.height=5,warn = -1)
coding_experience_med_summary <- coding_experience_med_summary %>% 
  filter(role_title == role) 
ml_experience_med_summary <- ml_experience_med_summary %>% 
  filter(role_title == role) 
compensation_med_summary <- compensation_med_summary %>% 
  filter(role_title == role) 

quests <- vis_data_long(role,'Select any activities that make up an important part of your role at work:') 

# If the average percentage of a role users that do a certain activity is larger than average percentage of all users, I'd consider it as a distinct quests for that role
top_quests <- quests %>% 
  filter(if_bigger_than_average) %>% 
slice(1:3) %>% 
  group_by(role_title) %>% 
  mutate(text = paste0(items,collapse = \" \n \")) %>% 
  slice(1)

    
# If there is not such an activity exists then I'd say that is no distinct quest for that particular role
if(nrow(top_quests) <1 ){
    #quests <- data.frame(text='Their distinct quest might not be clear in the survey')
  top_quests <-  quests %>% 
 # filter(if_bigger_than_average) %>% 
slice(1) %>% 
  #group_by(role_title) %>% 
  mutate(text = 'Their distinct quest might not be provided in the survey') 
}

g <- ggplot()+

  geom_textbox(data = compensation_med_summary,aes(x = 1,y=3.85,label = paste(median_compensation,'$')),
               family =myFont,width = unit(0.4, \"npc\"),size = 7,nudge_x =.45,color = '#2a9d8f') +
  geom_text(data = compensation_med_summary,aes(x = .9,y=3.85,label =  'Median Compensation'),
               family =myFont,hjust = 0,size = 7,alpha = 0.5,nudge_x =.45) +
  geom_textbox(data = coding_experience_med_summary,aes(x = 1,y=3.75,label = median_coding_experience),
               family =myFont,width = unit(0.4, \"npc\"),size = 7,nudge_x =.45,color = '#e07a5f') +
    geom_text(data = coding_experience_med_summary,aes(x = .90,y=3.75,label =  'Median Coding XP'),
               family =myFont,hjust = 0,size = 7,alpha = 0.5,nudge_x =.45) +
  geom_textbox(data = ml_experience_med_summary,aes(x = 1,y=3.65,label = median_ml_experience),
               family =myFont,width = unit(0.4, \"npc\"),size = 7,nudge_x =.45,color = '#3d405b') +
    geom_text(data = ml_experience_med_summary,aes(x = .9,y=3.65,label =  'Median ML XP'),
               family =myFont,hjust = 0,size = 7,alpha = 0.5,nudge_x =.45) +
  geom_text(data = top_quests,aes(x = 0.95,y=3.39,label = text),
               family =myFont,size = 6,nudge_x =0.65) +
    geom_text(data = top_quests,aes(x = 0.95,y=3.51,label = 'Main Quests:'),
               family =myFont,size = 10,nudge_x =0.55,hjust = 0.5) +
  scale_y_continuous(limits = c(3.,3.9)) +
  scale_x_continuous(limits = c(0.6,2.7)) +
  theme_void() +
    inset_element(p = img,
                left = 0.,
                bottom = 0.45,
                right = 0.2,
                top = 0.96) 
    
    g

}
```"
