mutate(compensation = factor(compensation,levels = compensation_levels)) %>%
group_by(role) %>%
summarise(
median_compensation = median.ordered(compensation),
)
# median for coding experience
coding_experience_med_summary <- kaggle_survey_2022 %>%
filter(!is.na(role),!is.na(coding_experience)) %>%
group_by(role) %>%
summarise(
median_coding_experience = median.ordered(coding_experience),
)
ml_experience_med_summary <- kaggle_survey_2022 %>%
filter(!is.na(role),!is.na(ml_experience)) %>%
mutate(ml_experience = factor(ml_experience,levels = ml_experience_levels)) %>%
group_by(role) %>%
summarise(
median_ml_experience = median.ordered(ml_experience),
)
plot_summary_info <-function(input_data,role_title) {
options(repr.plot.width=10, repr.plot.height=5,warn = -1)
coding_experience_med_summary <- coding_experience_med_summary %>%
filter(role == role_title)
ml_experience_med_summary <- ml_experience_med_summary %>%
filter(role == role_title)
compensation_med_summary <- compensation_med_summary %>%
filter(role == role_title)
quests <- get_summary_data(input_data,role_title,'Select any activities that make up an important part of your role at work:')
# If the average percentage of a role users that do a certain activity is larger than average percentage of all users, I'd consider it as a distinct quests for that role
top_quests <- quests %>%
filter(if_bigger_than_average) %>%
slice(1:3) %>%
group_by(role) %>%
mutate(text = paste0(items,collapse = " \n ")) %>%
slice(1)
# If there is not such an activity exists then I'd say that is no distinct quest for that particular role
if(nrow(top_quests) <1 ){
#quests <- data.frame(text='Their distinct quest might not be clear in the survey')
top_quests <-  quests %>%
# filter(if_bigger_than_average) %>%
slice(1) %>%
#group_by(role_title) %>%
mutate(text = 'Their distinct quest might not be provided in the survey')
}
g <- ggplot()+
geom_textbox(data = compensation_med_summary,aes(x = 1,y=3.85,label = paste(median_compensation,'$')),
family =my_font,width = unit(0.4, "npc"),size = 7,nudge_x =.45,color = '#2a9d8f') +
geom_text(data = compensation_med_summary,aes(x = .9,y=3.85,label =  'Median Compensation'),
family =my_font,hjust = 0,size = 7,alpha = 0.5,nudge_x =.45) +
geom_textbox(data = coding_experience_med_summary,aes(x = 1,y=3.75,label = median_coding_experience),
family =my_font,width = unit(0.4, "npc"),size = 7,nudge_x =.45,color = '#e07a5f') +
geom_text(data = coding_experience_med_summary,aes(x = .90,y=3.75,label =  'Median Coding XP'),
family =my_font,hjust = 0,size = 7,alpha = 0.5,nudge_x =.45) +
geom_textbox(data = ml_experience_med_summary,aes(x = 1,y=3.65,label = median_ml_experience),
family =my_font,width = unit(0.4, "npc"),size = 7,nudge_x =.45,color = '#3d405b') +
geom_text(data = ml_experience_med_summary,aes(x = .9,y=3.65,label =  'Median ML XP'),
family =my_font,hjust = 0,size = 7,alpha = 0.5,nudge_x =.45) +
geom_text(data = top_quests,aes(x = 0.95,y=3.39,label = text),
family =my_font,size = 6,nudge_x =0.65) +
geom_text(data = top_quests,aes(x = 0.95,y=3.51,label = 'Main Quests:'),
family =my_font,size = 10,nudge_x =0.55,hjust = 0.5) +
scale_y_continuous(limits = c(3.,3.9)) +
scale_x_continuous(limits = c(0.6,2.7)) +
theme_void(base_family = my_font)  +
theme(
plot.background = element_rect(color = '#023047',fill = '#023047'),
panel.background = element_rect(color = '#023047',fill = '#023047') )
# inset_element(p = img,
#               left = 0.,
#               bottom = 0.45,
#               right = 0.2,
#               top = 0.96)
g
}
plot_summary_info(input_data ,'Teacher / professor',coding_experience_med_summary,ml_experience_med_summary,compensation_med_summary)
plot_summary_info(input_data ,'Teacher / professor',coding_experience_med_summary,ml_experience_med_summary,compensation_med_summary)
plot_summary_info(input_data ,'Teacher / professor')
plot_summary_info(input_data ,'Teacher / professor')
get_summary_data <-function(input_data,role_title,question,items_vector='',n_items = 5,filter_ratio = 0.2,wrap_text= TRUE){
summary_data <- input_data %>%
select(
role,
starts_with(question)
) %>%
mutate(n_participants = nrow(.)) %>%
group_by(role) %>%
mutate(n_participants_per_g = n()) %>%
ungroup() %>%
make_long_df(question,
'items') %>%
filter(!is.na(items),!str_detect(items, 'nan')) %>%
group_by(items) %>%
mutate(avg_ratio = n() / mean(n_participants)) %>%
ungroup() %>%
filter(!str_detect(items, 'None'),!str_detect(items, 'Other')) %>%
group_by(role, items) %>%
summarise(ratio = n() / mean(n_participants_per_g),
avg_ratio = mean(avg_ratio)) %>%
mutate(
if_bigger_than_average = ratio > avg_ratio,
label = if_else(if_bigger_than_average, 'higher', 'lower')
) %>%
filter(role == role_title) %>%
arrange(desc(ratio))%>%
#filter(((ratio >= 0.2))|(ratio>0.5)) %>% #(ratio > avg_ratio) &
suppressMessages()
if (wrap_text) {
summary_data <- summary_data %>%
mutate(items = str_wrap(items,width = 15)) %>%
}
if (length(items_vector)<2)
summary_data %>%
slice_max(ratio ,n =n_items)
else
summary_data %>%  filter(items %in% items_vector) %>%
slice_max(ratio ,n =n_items)
}
get_summary_data <-function(input_data,role_title,question,items_vector='',n_items = 5,filter_ratio = 0.2,wrap_text= TRUE){
summary_data <- input_data %>%
select(
role,
starts_with(question)
) %>%
mutate(n_participants = nrow(.)) %>%
group_by(role) %>%
mutate(n_participants_per_g = n()) %>%
ungroup() %>%
make_long_df(question,
'items') %>%
filter(!is.na(items),!str_detect(items, 'nan')) %>%
group_by(items) %>%
mutate(avg_ratio = n() / mean(n_participants)) %>%
ungroup() %>%
filter(!str_detect(items, 'None'),!str_detect(items, 'Other')) %>%
group_by(role, items) %>%
summarise(ratio = n() / mean(n_participants_per_g),
avg_ratio = mean(avg_ratio)) %>%
mutate(
if_bigger_than_average = ratio > avg_ratio,
label = if_else(if_bigger_than_average, 'higher', 'lower')
) %>%
filter(role == role_title) %>%
arrange(desc(ratio))%>%
#filter(((ratio >= 0.2))|(ratio>0.5)) %>% #(ratio > avg_ratio) &
suppressMessages()
if (wrap_text) {
summary_data <- summary_data %>%
mutate(items = str_wrap(items,width = 15))
}
if (length(items_vector)<2)
summary_data %>%
slice_max(ratio ,n =n_items)
else
summary_data %>%  filter(items %in% items_vector) %>%
slice_max(ratio ,n =n_items)
}
plot_summary_info(input_data ,'Teacher / professor')
plot_summary_info <-function(input_data,role_title) {
options(repr.plot.width=10, repr.plot.height=5,warn = -1)
coding_experience_med_summary <- coding_experience_med_summary %>%
filter(role == role_title)
ml_experience_med_summary <- ml_experience_med_summary %>%
filter(role == role_title)
compensation_med_summary <- compensation_med_summary %>%
filter(role == role_title)
quests <- get_summary_data(input_data,role_title,'Select any activities that make up an important part of your role at work:',wrap_text = FALSE)
# If the average percentage of a role users that do a certain activity is larger than average percentage of all users, I'd consider it as a distinct quests for that role
top_quests <- quests %>%
filter(if_bigger_than_average) %>%
slice(1:3) %>%
group_by(role) %>%
mutate(text = paste0(items,collapse = " \n ")) %>%
slice(1)
# If there is not such an activity exists then I'd say that is no distinct quest for that particular role
if(nrow(top_quests) <1 ){
#quests <- data.frame(text='Their distinct quest might not be clear in the survey')
top_quests <-  quests %>%
# filter(if_bigger_than_average) %>%
slice(1) %>%
#group_by(role_title) %>%
mutate(text = 'Their distinct quest might not be provided in the survey')
}
g <- ggplot()+
geom_textbox(data = compensation_med_summary,aes(x = 1,y=3.85,label = paste(median_compensation,'$')),
family =my_font,width = unit(0.4, "npc"),size = 7,nudge_x =.45,color = '#2a9d8f') +
geom_text(data = compensation_med_summary,aes(x = .9,y=3.85,label =  'Median Compensation'),
family =my_font,hjust = 0,size = 7,alpha = 0.5,nudge_x =.45) +
geom_textbox(data = coding_experience_med_summary,aes(x = 1,y=3.75,label = median_coding_experience),
family =my_font,width = unit(0.4, "npc"),size = 7,nudge_x =.45,color = '#e07a5f') +
geom_text(data = coding_experience_med_summary,aes(x = .90,y=3.75,label =  'Median Coding XP'),
family =my_font,hjust = 0,size = 7,alpha = 0.5,nudge_x =.45) +
geom_textbox(data = ml_experience_med_summary,aes(x = 1,y=3.65,label = median_ml_experience),
family =my_font,width = unit(0.4, "npc"),size = 7,nudge_x =.45,color = '#3d405b') +
geom_text(data = ml_experience_med_summary,aes(x = .9,y=3.65,label =  'Median ML XP'),
family =my_font,hjust = 0,size = 7,alpha = 0.5,nudge_x =.45) +
geom_text(data = top_quests,aes(x = 0.95,y=3.39,label = text),
family =my_font,size = 6,nudge_x =0.65) +
geom_text(data = top_quests,aes(x = 0.95,y=3.51,label = 'Main Quests:'),
family =my_font,size = 10,nudge_x =0.55,hjust = 0.5) +
scale_y_continuous(limits = c(3.,3.9)) +
scale_x_continuous(limits = c(0.6,2.7)) +
theme_void(base_family = my_font)  +
theme(
plot.background = element_rect(color = '#023047',fill = '#023047'),
panel.background = element_rect(color = '#023047',fill = '#023047') )
# inset_element(p = img,
#               left = 0.,
#               bottom = 0.45,
#               right = 0.2,
#               top = 0.96)
g
}
plot_summary_info(input_data ,'Teacher / professor')
```{r fig.height=4,fig.width=10}
plot_summary_info(input_data ,'Teacher / professor')
plot_summary_info(input_data ,'Teacher / professor') + visualization_plot(input_data,'Teacher / professor',n_items = 3)
plot_summary_info(input_data ,'Teacher / professor')
visualization_plot(input_data,'Data Engineer',n_items = 3)
visualization_plot(input_data,'Data Engineer',n_items = 4)
input_data %>% count(role) %>% View()
visualization_plot(input_data,'Software Engineer',n_items = 4)
role_title <- 'Software Engineer'
visualization_plot(input_data,'Teacher / professor',n_items = 3)
cloud_plot(input_data,role_title,n_items = 3)
role_title <- 'Software Engineer'
cloud_plot(input_data,role_title,n_items = 3)
tools_plot(input_data,role_title,n_items = 8)
ml_plot(input_data,role_title,n_items = 8)
ml_plot(input_data,role_title,n_items = 8)
role_title <- 'Data Advocate'
ml_plot(input_data,role_title,n_items = 8)
role_title <- 'Developer Advocate'
cloud_plot(input_data,role_title,n_items = 3)
tools_plot(input_data,role_title,n_items = 8)
tools_plot(input_data,role_title,n_items = 8)
ml_plot(input_data,role_title,n_items = 8)
datastorage_summary_plot <- create_power_bars(datastorage_summary, '#2a9d8f')
cloud_platforms_summary_plot <- create_power_bars(cloud_platforms_summary, '#2a9d8f')
cloud_products_summary_plot <- create_power_bars(cloud_products_summary, '#2a9d8f')
programming_languages_summary_plot <-create_power_bars(programming_languages_summary)
databases_summary_plot <- create_power_bars(databases_summary, '#f4a261')
ides_summary_plot <- create_power_bars(ides_summary, '#2a9d8f')
programming_languages_summary <-
get_summary_data(
input_data,
role_title,
"What programming languages do you use on a regular basis?",
n_items = n_items
)
databases_summary <-
get_summary_data(
input_data,
role_title,
"Do you use any of the following data products (relational databases, data warehouses, data lakes, or similar)?",
n_items = n_items
)
ides_summary <-
get_summary_data(
input_data,
role_title,
"Which of the following integrated development environments (IDE's) do you use on a regular basis?",
n_items = n_items
)
programming_languages_summary_plot <-create_power_bars(programming_languages_summary)
databases_summary_plot <- create_power_bars(databases_summary, '#f4a261')
ides_summary_plot <- create_power_bars(ides_summary, '#2a9d8f')
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot
n_items = 8
programming_languages_summary <-
get_summary_data(
input_data,
role_title,
"What programming languages do you use on a regular basis?",
n_items = n_items
)
databases_summary <-
get_summary_data(
input_data,
role_title,
"Do you use any of the following data products (relational databases, data warehouses, data lakes, or similar)?",
n_items = n_items
)
ides_summary <-
get_summary_data(
input_data,
role_title,
"Which of the following integrated development environments (IDE's) do you use on a regular basis?",
n_items = n_items
)
programming_languages_summary_plot <-create_power_bars(programming_languages_summary)
databases_summary_plot <- create_power_bars(databases_summary, '#f4a261')
ides_summary_plot <- create_power_bars(ides_summary, '#2a9d8f')
n_items = 3
cloud_platforms_summary <-
get_summary_data(
input_data,
role_title,
"Which of the following cloud computing platforms do you use?",
n_items = n_items
)
datastorage_summary <-
get_summary_data(
input_data,
role_title,
"Do you use any of the following data storage products?",
n_items = n_items
)
cloud_products_summary <-
get_summary_data(
input_data,
role_title,
"Do you use any of the following cloud computing products?",
n_items = n_items
)
datastorage_summary_plot <- create_power_bars(datastorage_summary, '#2a9d8f')
cloud_platforms_summary_plot <- create_power_bars(cloud_platforms_summary, '#2a9d8f')
cloud_products_summary_plot <- create_power_bars(cloud_products_summary, '#2a9d8f')
ml_frameworks_summary <-
get_summary_data(
input_data,
role_title,
"Which of the following machine learning frameworks do you use on a regular basis?",
n_items = 8
)
ml_frameworks_summary_plot <-create_power_bars(ml_frameworks_summary)
n_items = 6
ml_frameworks_summary <-
get_summary_data(
input_data,
role_title,
"Which of the following machine learning frameworks do you use on a regular basis?",
n_items = 8
)
ml_algorithms_summary <-
get_summary_data(
input_data,
role_title,
"Which of the following ML algorithms do you use on a regular basis?",
n_items = n_items
)
ml_nlp_summary <-
get_summary_data(
input_data,
role_title,
"Which of the following natural language processing (NLP) methods do you use on a regular basis?",
n_items = n_items
)
ml_nlp_summary <- ml_nlp_summary %>%
mutate(
items = recode(
items,
`Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)` = 'Image classification',
`General purpose image/video tools (PIL, cv2, skimage, etc)` = 'General purpose image/video tools',
`Object detection methods (YOLOv3, RetinaNet, etc)` = 'Object detection',
`Generative Networks (GAN, VAE, etc)` = 'Generative Networks',
`Image segmentation methods (U-Net, Mask R-CNN, etc)` = 'Image segmentation methods'
)
)
ml_vision_summary <-
get_summary_data(
input_data,
role_title,
"Which categories of computer vision methods do you use on a regular basis?",
n_items = n_items
)
ml_vision_summary <-ml_vision_summary%>%
mutate(
items = recode(
items,
`Word embeddings/vectors (GLoVe, fastText, word2vec)` = 'Word embeddings',
`Transformer language models (GPT-3, BERT, XLnet, etc)` = 'Transformers',
`Encoder-decorder models (seq2seq, vanilla transformers)` = 'Encoder-decorder models',
`Contextualized embeddings (ELMo, CoVe)` = 'Contextualized embeddings'
)
)
ml_frameworks_summary_plot <-create_power_bars(ml_frameworks_summary)
ml_algorithms_summary_plot <- create_power_bars(ml_algorithms_summary, '#f4a261')
ml_nlp_summary_plot <- create_power_bars(ml_nlp_summary, '#2a9d8f')
ml_vision_summary_plot <- create_power_bars(ml_vision_summary, '#2a9d8f')
n_items = 8
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + plot_layout(nrow = 1)
visualization_summary <-
get_summary_data(
input_data,
role_title,
"Do you use any of the following data visualization libraries on a regular basis?",
n_items = n_items
)
bi_summary <-
get_summary_data(
input_data,
role_title,
"Do you use any of the following business intelligence tools?",
n_items = n_items
)
visualization_summary_plot <- create_power_bars(visualization_summary, '#2a9d8f')
bi_summary_plot <- create_power_bars(bi_summary, '#2a9d8f')
visualization_summary_plot + bi_summary_plot
ml_algorithms_summary_plot <- create_power_bars(ml_algorithms_summary, '#f4a261') + plot_layout(nrow = 2)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot +visualization_summary_plot
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot +visualization_summary_plot+ plot_layout(nrow = 2)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot +visualization_summary_plot+ plot_layout(nrow = 2)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot +visualization_summary_plot+ plot_layout(nrow = 4)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot +visualization_summary_plot+ plot_layout(ncol = 4)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot + plot_layout(ncol = 4)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot + plot_layout(ncol = 3)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot + plot_layout(ncol = 2)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot + plot_layout(nrow = 2)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot + plot_layout(nrow = 2,ncol = 4)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot +ml_nlp_summary_plot + plot_layout(nrow = 2,ncol = 4)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot +ml_nlp_summary_plot + plot_layout(nrow = 3,ncol = 4)
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot + ml_algorithms_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot +ml_nlp_summary_plot + plot_layout(nrow = 3,ncol = 4,heights = c(8,6,1))
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot +  ml_algorithms_summary_plot +ml_frameworks_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot +ml_nlp_summary_plot + plot_layout(nrow = 3,ncol = 4,heights = c(8,6,1))
# This function creates video-game like bar charts for kaggle questions
# Input
create_power_bars <- function(input_data,fill_color='#2a9d8f',title = '',emoji_char = 'sword'){
# options(repr.plot.width=10, repr.plot.height=5,warn = -1)
options()
input_data %>%
ggplot(aes( x = fct_reorder(items,ratio))) +
geom_chicklet(aes(y = 1), fill = '#023047',color = '#023047') +
geom_col(aes(y = ratio,fill = label),
alpha = 0.4,
width = 0.7,
) +
# geom_col(aes(y = avg_ratio),
#          alpha = 0.9,
#          width = 0.7,
#          fill = fill_color) +
geom_chicklet(aes(y = avg_ratio),
colour = "#f1faee",fill = 'transparent',size= 2,width = 0.7,linetype = 'dotted') +
geom_chicklet(aes(y = 0.1),
colour = "#f1faee",fill = 'transparent',size= 2,width = 0.7) +
geom_chicklet(aes(y = 0.2),radius =  grid::unit(3, "pt"),
colour = "#f1faee",fill = 'transparent',size= 2,width = 0.7) +
geom_chicklet(aes(y = 0.3),radius =  grid::unit(3, "pt"),
colour = "#f1faee",fill = 'transparent',size= 2,width = 0.7) +
geom_chicklet(aes(y = 0.4),
colour = "#f1faee",fill = 'transparent',size= 2,width = 0.7) +
geom_chicklet(aes(y = 0.5),radius =  grid::unit(3, "pt"),
colour = "#f1faee",fill = 'transparent',size= 2,width = 0.7) +
geom_chicklet(aes(y = 0.6),radius =  grid::unit(3, "pt"),
colour = "#f1faee",fill = 'transparent',size= 2,width = 0.7) +
geom_chicklet(aes(y = 0.7),radius =  grid::unit(3, "pt"),
colour = "#f1faee",fill = 'transparent',size= 2,width = 0.7) +
geom_chicklet(aes(y = 0.8),radius =  grid::unit(3, "pt"),
colour = "#f1faee",fill = 'transparent',size= 2,width = 0.7) +
geom_chicklet(aes(y = 0.9),radius =  grid::unit(3, "pt"),
colour = "#f1faee",fill = 'transparent',size= 2,width = 0.7) +
geom_chicklet(aes(y = 1),radius =  grid::unit(3, "pt"),
colour = "#f1faee",fill = 'transparent',size= 2,width = 0.7) +
geom_text(aes(y=1.07,label = round(100*ratio)),family = my_font,size = 13,color = '#f1faee')+
#geom_text(aes(y=1.17,label = round(100*(ratio-avg_ratio)),color = label),family = my_font,size = 12,color = '#f1faee')+
#scale_color_manual(values = c('lower'='#ef476f','higher'='#06d6a0'))+
scale_fill_manual(values = c('lower'='#ef476f','higher'='#06d6a0'))+
labs(x = '',y ='',title = title)+
coord_flip() +
theme_void(base_family = my_font)  +
theme(
legend.position = 'none',
axis.title = element_text(family = my_font,hjust = 0.5,size = 50,margin = margin(r = 30),color = '#f1faee'),#,aspect.ratio =1,
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 44,margin=margin(r = 30),hjust = 0.5,color = '#f1faee'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(color = '#023047',fill = '#023047'),
panel.background = element_rect(color = '#023047',fill = '#023047') )
}
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot +  ml_algorithms_summary_plot +ml_frameworks_summary_plot + ml_nlp_summary_plot + ml_vision_summary_plot +ml_nlp_summary_plot + plot_layout(nrow = 3,ncol = 4,heights = c(8,6,1))
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot +  ml_algorithms_summary_plot  + ml_nlp_summary_plot + ml_vision_summary_plot +ml_nlp_summary_plot +
plot_layout(nrow = 3,ncol = 4,heights = c(8,6,1),widths = c(1,1,1,1))
datastorage_summary_plot <- create_power_bars(datastorage_summary, '#2a9d8f')
cloud_platforms_summary_plot <- create_power_bars(cloud_platforms_summary, '#2a9d8f')
cloud_products_summary_plot <- create_power_bars(cloud_products_summary, '#2a9d8f')
datastorage_summary_plot + cloud_platforms_summary_plot + cloud_products_summary_plot
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot +
datastorage_summary_plot + datastorage_summary_plot + cloud_platforms_summary_plot + cloud_products_summary_plot+ ml_algorithms_summary_plot  + ml_nlp_summary_plot + ml_vision_summary_plot +ml_nlp_summary_plot +
plot_layout(nrow = 3,ncol = 4,heights = c(8,6,1),widths = c(1,1,1,1))
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot +
datastorage_summary_plot + datastorage_summary_plot + cloud_platforms_summary_plot + cloud_products_summary_plot+ ml_nlp_summary_plot +
plot_layout(nrow = 3,ncol = 4,heights = c(8,6,1),widths = c(1,1,1,1))
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot +
datastorage_summary_plot + datastorage_summary_plot + cloud_platforms_summary_plot + cloud_products_summary_plot+ ml_nlp_summary_plot +
plot_layout(nrow = 3,ncol = 4,heights = c(8,6,3),widths = c(1,1,1,1))
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot +
datastorage_summary_plot + datastorage_summary_plot + cloud_platforms_summary_plot + cloud_products_summary_plot+ ml_nlp_summary_plot +
plot_layout(nrow = 3,ncol = 4,heights = c(1,8/6,8/3),widths = c(1,1,1,1))
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot +
datastorage_summary_plot + datastorage_summary_plot + cloud_platforms_summary_plot + cloud_products_summary_plot+ ml_nlp_summary_plot +
plot_layout(nrow = 3,ncol = 4,heights = c(8,6/6,3),widths = c(1,1,1,1))
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot +
datastorage_summary_plot + datastorage_summary_plot + cloud_platforms_summary_plot + cloud_products_summary_plot+ ml_nlp_summary_plot +
plot_layout(nrow = 3,ncol = 4,heights = c(8,6,4),widths = c(1,1,1,1))
programming_languages_summary_plot + databases_summary_plot + ides_summary_plot + ml_frameworks_summary_plot +
datastorage_summary_plot + datastorage_summary_plot + cloud_platforms_summary_plot + cloud_products_summary_plot+ ml_nlp_summary_plot +
plot_layout(nrow = 3,ncol = 4,heights = c(8,3,4),widths = c(1,1,1,1))
---
title: "R Notebook"
output: html_notebook
---
)
databases_summary
title: "R Noteboo
databases_summary
asd
)
1231
''
_))))
